name: 'Threagile AI Threat Modeling'
description: 'Automatically generate and validate threat models from Infrastructure as Code'
author: 'Threagile'
branding:
  icon: 'shield'
  color: 'red'

inputs:
  mode:
    description: 'Generation mode (simple or detailed)'
    required: false
    default: 'simple'
  iac-dirs:
    description: 'Comma-separated directories containing IaC files'
    required: false
    default: '.'
  output-file:
    description: 'Output threat model file path'
    required: false
    default: 'threagile-generated.yaml'
  merge-with:
    description: 'Existing threat model to merge with'
    required: false
    default: ''
  context-files:
    description: 'AI context files (e.g., CLAUDE.md)'
    required: false
    default: 'CLAUDE.md,.github/copilot-instructions.md'
  comment-on-pr:
    description: 'Comment analysis results on PR'
    required: false
    default: 'true'
  fail-on-high-risk:
    description: 'Fail the action if high risks are found'
    required: false
    default: 'false'
  github-token:
    description: 'GitHub token for PR comments'
    required: false
    default: ${{ github.token }}
  threagile-version:
    description: 'Threagile version to use'
    required: false
    default: 'latest'

outputs:
  risks-found:
    description: 'Number of risks identified'
    value: ${{ steps.analyze.outputs.risks-found }}
  high-risks:
    description: 'Number of high/critical risks'
    value: ${{ steps.analyze.outputs.high-risks }}
  model-path:
    description: 'Path to generated threat model'
    value: ${{ steps.generate.outputs.model-path }}

runs:
  using: 'composite'
  steps:
    - name: Setup Threagile
      shell: bash
      run: |
        echo "Installing Threagile ${{ inputs.threagile-version }}..."
        
        # For MVP, use the docker image
        # In future, download binary directly
        if [ "${{ inputs.threagile-version }}" = "latest" ]; then
          THREAGILE_VERSION=$(curl -s https://api.github.com/repos/threagile/threagile/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        else
          THREAGILE_VERSION="${{ inputs.threagile-version }}"
        fi
        
        echo "Using Threagile version: $THREAGILE_VERSION"
        echo "THREAGILE_VERSION=$THREAGILE_VERSION" >> $GITHUB_ENV

    - name: Generate Threat Model
      id: generate
      shell: bash
      run: |
        echo "Generating threat model..."
        
        # Build command
        THREAGILE_CMD="docker run --rm -v $(pwd):/app/work threagile/threagile:${THREAGILE_VERSION}"
        
        # Add ai-generate command (this will need to be implemented in Threagile)
        GENERATE_CMD="$THREAGILE_CMD ai-generate"
        GENERATE_CMD="$GENERATE_CMD --mode ${{ inputs.mode }}"
        GENERATE_CMD="$GENERATE_CMD --output /app/work/${{ inputs.output-file }}"
        
        # Parse directories
        IFS=',' read -ra DIRS <<< "${{ inputs.iac-dirs }}"
        for dir in "${DIRS[@]}"; do
          GENERATE_CMD="$GENERATE_CMD --iac-dir /app/work/$dir"
        done
        
        # Add merge file if specified
        if [ -n "${{ inputs.merge-with }}" ]; then
          GENERATE_CMD="$GENERATE_CMD --merge-with /app/work/${{ inputs.merge-with }}"
        fi
        
        # Add context files
        IFS=',' read -ra CONTEXTS <<< "${{ inputs.context-files }}"
        for ctx in "${CONTEXTS[@]}"; do
          if [ -f "$ctx" ]; then
            GENERATE_CMD="$GENERATE_CMD --context-file /app/work/$ctx"
          fi
        done
        
        # Run generation
        echo "Running: $GENERATE_CMD"
        $GENERATE_CMD
        
        echo "model-path=${{ inputs.output-file }}" >> $GITHUB_OUTPUT

    - name: Analyze Threat Model
      id: analyze
      shell: bash
      run: |
        echo "Analyzing threat model..."
        
        # Run Threagile analysis
        ANALYZE_CMD="docker run --rm -v $(pwd):/app/work threagile/threagile:${THREAGILE_VERSION}"
        ANALYZE_CMD="$ANALYZE_CMD --model /app/work/${{ inputs.output-file }}"
        ANALYZE_CMD="$ANALYZE_CMD --output /app/work"
        
        echo "Running: $ANALYZE_CMD"
        $ANALYZE_CMD
        
        # Parse risks from generated files
        if [ -f "risks.json" ]; then
          TOTAL_RISKS=$(jq '. | length' risks.json)
          HIGH_RISKS=$(jq '[.[] | select(.severity == "high" or .severity == "critical")] | length' risks.json)
          
          echo "risks-found=$TOTAL_RISKS" >> $GITHUB_OUTPUT
          echo "high-risks=$HIGH_RISKS" >> $GITHUB_OUTPUT
          
          echo "Found $TOTAL_RISKS risks ($HIGH_RISKS high/critical)"
        else
          echo "risks-found=0" >> $GITHUB_OUTPUT
          echo "high-risks=0" >> $GITHUB_OUTPUT
        fi

    - name: Comment on PR
      if: inputs.comment-on-pr == 'true' && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');
          
          // Read analysis results
          let comment = '## üõ°Ô∏è Threagile Threat Model Analysis\n\n';
          
          // Model generation summary
          comment += '### Model Generation\n';
          comment += `- **Mode**: ${{ inputs.mode }}\n`;
          comment += `- **IaC Directories**: ${{ inputs.iac-dirs }}\n`;
          comment += `- **Output**: ${{ inputs.output-file }}\n\n`;
          
          // Risk summary
          const totalRisks = parseInt('${{ steps.analyze.outputs.risks-found }}');
          const highRisks = parseInt('${{ steps.analyze.outputs.high-risks }}');
          
          comment += '### Risk Summary\n';
          if (totalRisks === 0) {
            comment += '‚úÖ No risks identified\n';
          } else {
            comment += `- **Total Risks**: ${totalRisks}\n`;
            comment += `- **High/Critical Risks**: ${highRisks}\n\n`;
            
            // Add risk details if available
            if (fs.existsSync('risks.json')) {
              const risks = JSON.parse(fs.readFileSync('risks.json', 'utf8'));
              
              // Group by severity
              const risksBySeverity = {};
              risks.forEach(risk => {
                if (!risksBySeverity[risk.severity]) {
                  risksBySeverity[risk.severity] = [];
                }
                risksBySeverity[risk.severity].push(risk);
              });
              
              // Show high/critical risks
              ['critical', 'high'].forEach(severity => {
                if (risksBySeverity[severity] && risksBySeverity[severity].length > 0) {
                  comment += `\n#### ${severity.charAt(0).toUpperCase() + severity.slice(1)} Risks\n`;
                  risksBySeverity[severity].slice(0, 5).forEach(risk => {
                    comment += `- **${risk.title}**: ${risk.description}\n`;
                  });
                  if (risksBySeverity[severity].length > 5) {
                    comment += `- _...and ${risksBySeverity[severity].length - 5} more_\n`;
                  }
                }
              });
            }
          }
          
          // Add links to generated files
          comment += '\n### Generated Files\n';
          comment += `- [Threat Model](${{ inputs.output-file }})\n`;
          comment += '- [Risk Report](report.pdf)\n';
          comment += '- [Risk Details](risks.xlsx)\n';
          
          // Add action recommendation
          if (highRisks > 0) {
            comment += '\n‚ö†Ô∏è **Action Required**: Please review and address high/critical risks before merging.\n';
          }
          
          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Check Risk Threshold
      if: inputs.fail-on-high-risk == 'true'
      shell: bash
      run: |
        HIGH_RISKS=${{ steps.analyze.outputs.high-risks }}
        if [ "$HIGH_RISKS" -gt "0" ]; then
          echo "‚ùå Found $HIGH_RISKS high/critical risks. Failing the action."
          exit 1
        else
          echo "‚úÖ No high/critical risks found."
        fi